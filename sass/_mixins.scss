/**
 *	Custom mixins (some copied from bourbon)
 *	@author 	Adarsh Pastakia
 *	@company	HMC
 *  @copyright 	2015-2016, Adarsh Pastakia
 */
@mixin sticky() {
  position: -webkit-sticky;
  position: -moz-sticky;
  position: -ms-sticky;
  position: sticky;
}

@mixin blur($value: 5px) {
  -webkit-filter: blur($value);
  -moz-filter: blur($value);
  -ms-filter: blur($value);
  -o-filter: blur($value);
  filter: blur($value);
}

@mixin backdrop-blur($value: 5px) {
  -webkit-backdrop-filter: blur($value);
  -moz-backdrop-filter: blur($value);
  -ms-backdrop-filter: blur($value);
  -o-backdrop-filter: blur($value);
  backdrop-filter: blur($value);
}

@mixin size($width: auto, $height: auto) {
  width: $width;
  height: $height;
}

@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin padding($dir, $size) {
  -webkit-padding-#{$dir}: $size;
  -moz-padding-#{$dir}: $size;
  -ms-padding-#{$dir}: $size;
  -o-padding-#{$dir}: $size;
  padding-#{$dir}: $size;
}

@mixin margin($dir, $size) {
  -webkit-margin-#{$dir}: $size;
  -moz-margin-#{$dir}: $size;
  -ms-margin-#{$dir}: $size;
  -o-margin-#{$dir}: $size;
  margin-#{$dir}: $size;
}

@mixin border($dir, $val...) {
  -webkit-border-#{$dir}: $val;
  -moz-border-#{$dir}: $val;
  -ms-border-#{$dir}: $val;
  -o-border-#{$dir}: $val;
  border-#{$dir}: $val;
}

@mixin borderEx($dir, $prop, $val) {
  -webkit-border-#{$dir}-#{$prop}: $val;
  -moz-border-#{$dir}-#{$prop}: $val;
  -ms-border-#{$dir}-#{$prop}: $val;
  -o-border-#{$dir}-#{$prop}: $val;
  border-#{$dir}-#{$prop}: $val;
}

@function contrast($color, $dark: $black-olive, $light: $coconut) {
  @return contrast-color($color, $dark, $light);
}

/// Checks for a valid CSS length.
///
/// @param {String} $value

@function is-length($value) {
  @return type-of($value) != "null" and (str-slice($value + "", 1, 4) == "calc"
       or index(auto inherit initial 0, $value)
       or (type-of($value) == "number" and not(unitless($value))));
}

/// Converts shorthand to the 4-value syntax.
///
/// @param {List} $shorthand
///
/// @example scss - Usage
///   .element {
///     margin: unpack(1em 2em);
///   }
///
/// @example css - CSS Output
///   .element {
///     margin: 1em 2em 1em 2em;
///   }

@function unpack($shorthand) {
  @if length($shorthand) == 1 {
	@return nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1) nth($shorthand, 1);
  } @else if length($shorthand) == 2 {
	@return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 1) nth($shorthand, 2);
  } @else if length($shorthand) == 3 {
	@return nth($shorthand, 1) nth($shorthand, 2) nth($shorthand, 3) nth($shorthand, 2);
  } @else {
	@return $shorthand;
  }
}

/// Directional-property mixins are shorthands for writing properties like the following
///
/// @ignore You can also use `false` instead of `null`.
///
/// @param {List} $vals
///   List of directional values
///
/// @example scss - Usage
///   .element {
///     @include border-style(dotted null);
///     @include margin(null 0 10px);
///   }
///
/// @example css - CSS Output
///   .element {
///     border-bottom-style: dotted;
///     border-top-style: dotted;
///     margin-bottom: 10px;
///     margin-left: 0;
///     margin-right: 0;
///   }
///
/// @require {function} contains-falsy
///
/// @return {List}

@function collapse-directionals($vals) {
  $output: null;

  $a: nth($vals, 1);
  $b: if(length($vals) < 2, $a, nth($vals, 2));
  $c: if(length($vals) < 3, $a, nth($vals, 3));
  $d: if(length($vals) < 2, $a, nth($vals, if(length($vals) < 4, 2, 4)));

  @if $a == 0 {
	$a: 0;
  }
  @if $b == 0 {
	$b: 0;
  }
  @if $c == 0 {
	$c: 0;
  }
  @if $d == 0 {
	$d: 0;
  }

  @if $a == $b and $a == $c and $a == $d {
	$output: $a;
  } @else if $a == $c and $b == $d {
	$output: $a $b;
  } @else if $b == $d {
	$output: $a $b $c;
  } @else {
	$output: $a $b $c $d;
  }

  @return $output;
}

/// Output directional properties, for instance `margin`.
///
/// @access private
///
/// @param {String} $pre
///   Prefix to use
/// @param {String} $suf
///   Suffix to use
/// @param {List} $vals
///   List of values
///
/// @require {function} collapse-directionals
/// @require {function} contains-falsy

@mixin directional-property($pre, $suf, $vals) {
  // Property Names
  $top: $pre + "-top"    + if($suf, "-#{$suf}", "");
  $bottom: $pre + "-bottom" + if($suf, "-#{$suf}", "");
  $left: $pre + "-start"   + if($suf, "-#{$suf}", "");
  $right: $pre + "-end"  + if($suf, "-#{$suf}", "");
  $all: $pre +             if($suf, "-#{$suf}", "");

  $vals: collapse-directionals($vals);

  @if contains-falsy($vals) {
	@if nth($vals, 1) {
	  #{$top}: nth($vals, 1);
	}

	@if length($vals) == 1 {
	  @if nth($vals, 1) {
		#{$right}: nth($vals, 1);
	  }
	} @else {
	  @if nth($vals, 2) {
		#{$right}: nth($vals, 2);
	  }
	}

	@if length($vals) == 2 {
	  @if nth($vals, 1) {
		#{$bottom}: nth($vals, 1);
	  }
	  @if nth($vals, 2) {
		#{$left}: nth($vals, 2);
	  }
	} @else if length($vals) == 3 {
	  @if nth($vals, 3) {
		#{$bottom}: nth($vals, 3);
	  }
	  @if nth($vals, 2) {
		#{$left}: nth($vals, 2);
	  }
	} @else if length($vals) == 4 {
	  @if nth($vals, 3) {
		#{$bottom}: nth($vals, 3);
	  }
	  @if nth($vals, 4) {
		#{$left}: nth($vals, 4);
	  }
	}
  } @else {
	#{$all}: $vals;
  }
}

@mixin position($position: relative, $coordinates: null null null null) {
  @if type-of($position) == list {
	$coordinates: $position;
	$position: relative;
  }

  $coordinates: unpack($coordinates);

  $offsets: (
		  top: nth($coordinates, 1),
		  right: nth($coordinates, 2),
		  bottom: nth($coordinates, 3),
		  left: nth($coordinates, 4)
  );

  position: $position;

  @each $offset, $value in $offsets {
	@if is-length($value) {
	  #{$offset}: $value;
	}
  }
}

/*@mixin padding($vals...) {
  @include directional-property(padding, false, $vals...);
}

@mixin margin($vals...) {
  @include directional-property(margin, false, $vals...);
}

@mixin border-style($vals...) {
  @include directional-property(border, style, $vals...);
}

@mixin border-color($vals...) {
  @include directional-property(border, color, $vals...);
}

@mixin border-width($vals...) {
  @include directional-property(border, width, $vals...);
}*/

